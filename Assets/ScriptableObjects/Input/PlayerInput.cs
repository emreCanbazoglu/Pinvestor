//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.0
//     from Assets/ScriptableObjects/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Pinvestor.InputSystem
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/ScriptableObjects/Input/PlayerInput.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Core"",
            ""id"": ""93c051bc-9cf3-466b-8e3f-db9d67b9cc99"",
            ""actions"": [
                {
                    ""name"": ""ApprovePlacement"",
                    ""type"": ""Value"",
                    ""id"": ""903bd8e3-08dc-45b8-8fb4-859b1fb2508f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelPlacement"",
                    ""type"": ""Button"",
                    ""id"": ""e3b33352-bfdf-4869-9c2c-0a027b601840"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""656566e7-1a08-4566-8865-8022f22c0000"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApprovePlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5525863e-9b0f-44af-81b0-753f0215a66e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6852ded2-c838-4f1d-aa9b-6c1423d9c6a8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelPlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BallShooter"",
            ""id"": ""c54f6bed-c0f6-46bd-ab1e-5ec1be7950de"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""3cce624b-8f74-4f72-92c3-e60aadc46eb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""01b27438-39e4-48fb-8b29-8d0caafd5f1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a108dec-9563-40c1-9014-2909dff640dd"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4eb52a-74d4-4ea8-8460-67b447b84ada"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2b059aa-fa32-4f39-8d7a-73329a40d3c8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Core
            m_Core = asset.FindActionMap("Core", throwIfNotFound: true);
            m_Core_ApprovePlacement = m_Core.FindAction("ApprovePlacement", throwIfNotFound: true);
            m_Core_CancelPlacement = m_Core.FindAction("CancelPlacement", throwIfNotFound: true);
            // BallShooter
            m_BallShooter = asset.FindActionMap("BallShooter", throwIfNotFound: true);
            m_BallShooter_Aim = m_BallShooter.FindAction("Aim", throwIfNotFound: true);
            m_BallShooter_Shoot = m_BallShooter.FindAction("Shoot", throwIfNotFound: true);
        }

        ~@PlayerInput()
        {
            UnityEngine.Debug.Assert(!m_Core.enabled, "This will cause a leak and performance issues, PlayerInput.Core.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_BallShooter.enabled, "This will cause a leak and performance issues, PlayerInput.BallShooter.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Core
        private readonly InputActionMap m_Core;
        private List<ICoreActions> m_CoreActionsCallbackInterfaces = new List<ICoreActions>();
        private readonly InputAction m_Core_ApprovePlacement;
        private readonly InputAction m_Core_CancelPlacement;
        /// <summary>
        /// Provides access to input actions defined in input action map "Core".
        /// </summary>
        public struct CoreActions
        {
            private @PlayerInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CoreActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Core/ApprovePlacement".
            /// </summary>
            public InputAction @ApprovePlacement => m_Wrapper.m_Core_ApprovePlacement;
            /// <summary>
            /// Provides access to the underlying input action "Core/CancelPlacement".
            /// </summary>
            public InputAction @CancelPlacement => m_Wrapper.m_Core_CancelPlacement;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Core; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CoreActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CoreActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CoreActions" />
            public void AddCallbacks(ICoreActions instance)
            {
                if (instance == null || m_Wrapper.m_CoreActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CoreActionsCallbackInterfaces.Add(instance);
                @ApprovePlacement.started += instance.OnApprovePlacement;
                @ApprovePlacement.performed += instance.OnApprovePlacement;
                @ApprovePlacement.canceled += instance.OnApprovePlacement;
                @CancelPlacement.started += instance.OnCancelPlacement;
                @CancelPlacement.performed += instance.OnCancelPlacement;
                @CancelPlacement.canceled += instance.OnCancelPlacement;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CoreActions" />
            private void UnregisterCallbacks(ICoreActions instance)
            {
                @ApprovePlacement.started -= instance.OnApprovePlacement;
                @ApprovePlacement.performed -= instance.OnApprovePlacement;
                @ApprovePlacement.canceled -= instance.OnApprovePlacement;
                @CancelPlacement.started -= instance.OnCancelPlacement;
                @CancelPlacement.performed -= instance.OnCancelPlacement;
                @CancelPlacement.canceled -= instance.OnCancelPlacement;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CoreActions.UnregisterCallbacks(ICoreActions)" />.
            /// </summary>
            /// <seealso cref="CoreActions.UnregisterCallbacks(ICoreActions)" />
            public void RemoveCallbacks(ICoreActions instance)
            {
                if (m_Wrapper.m_CoreActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CoreActions.AddCallbacks(ICoreActions)" />
            /// <seealso cref="CoreActions.RemoveCallbacks(ICoreActions)" />
            /// <seealso cref="CoreActions.UnregisterCallbacks(ICoreActions)" />
            public void SetCallbacks(ICoreActions instance)
            {
                foreach (var item in m_Wrapper.m_CoreActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CoreActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CoreActions" /> instance referencing this action map.
        /// </summary>
        public CoreActions @Core => new CoreActions(this);

        // BallShooter
        private readonly InputActionMap m_BallShooter;
        private List<IBallShooterActions> m_BallShooterActionsCallbackInterfaces = new List<IBallShooterActions>();
        private readonly InputAction m_BallShooter_Aim;
        private readonly InputAction m_BallShooter_Shoot;
        /// <summary>
        /// Provides access to input actions defined in input action map "BallShooter".
        /// </summary>
        public struct BallShooterActions
        {
            private @PlayerInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public BallShooterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "BallShooter/Aim".
            /// </summary>
            public InputAction @Aim => m_Wrapper.m_BallShooter_Aim;
            /// <summary>
            /// Provides access to the underlying input action "BallShooter/Shoot".
            /// </summary>
            public InputAction @Shoot => m_Wrapper.m_BallShooter_Shoot;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_BallShooter; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="BallShooterActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(BallShooterActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="BallShooterActions" />
            public void AddCallbacks(IBallShooterActions instance)
            {
                if (instance == null || m_Wrapper.m_BallShooterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BallShooterActionsCallbackInterfaces.Add(instance);
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="BallShooterActions" />
            private void UnregisterCallbacks(IBallShooterActions instance)
            {
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BallShooterActions.UnregisterCallbacks(IBallShooterActions)" />.
            /// </summary>
            /// <seealso cref="BallShooterActions.UnregisterCallbacks(IBallShooterActions)" />
            public void RemoveCallbacks(IBallShooterActions instance)
            {
                if (m_Wrapper.m_BallShooterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="BallShooterActions.AddCallbacks(IBallShooterActions)" />
            /// <seealso cref="BallShooterActions.RemoveCallbacks(IBallShooterActions)" />
            /// <seealso cref="BallShooterActions.UnregisterCallbacks(IBallShooterActions)" />
            public void SetCallbacks(IBallShooterActions instance)
            {
                foreach (var item in m_Wrapper.m_BallShooterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BallShooterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="BallShooterActions" /> instance referencing this action map.
        /// </summary>
        public BallShooterActions @BallShooter => new BallShooterActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Core" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CoreActions.AddCallbacks(ICoreActions)" />
        /// <seealso cref="CoreActions.RemoveCallbacks(ICoreActions)" />
        public interface ICoreActions
        {
            /// <summary>
            /// Method invoked when associated input action "ApprovePlacement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnApprovePlacement(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "CancelPlacement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnCancelPlacement(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BallShooter" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="BallShooterActions.AddCallbacks(IBallShooterActions)" />
        /// <seealso cref="BallShooterActions.RemoveCallbacks(IBallShooterActions)" />
        public interface IBallShooterActions
        {
            /// <summary>
            /// Method invoked when associated input action "Aim" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnAim(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Shoot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnShoot(InputAction.CallbackContext context);
        }
    }
}
